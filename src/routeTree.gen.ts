/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SupportImport } from './routes/support'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as FeaturesImport } from './routes/features'
import { Route as ContactUsImport } from './routes/contact-us'
import { Route as AccountImport } from './routes/account'
import { Route as AboutUsImport } from './routes/about-us'
import { Route as LangImport } from './routes/$lang'
import { Route as AccountIndexImport } from './routes/account/index'
import { Route as EmailChangeImport } from './routes/email.change'
import { Route as AccountSettingsImport } from './routes/account/settings'
import { Route as LangTermsImport } from './routes/$lang/terms'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const AccountStorageLazyImport = createFileRoute('/account/storage')()

// Create/Update Routes

const SupportRoute = SupportImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const FeaturesRoute = FeaturesImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRoute,
} as any)

const ContactUsRoute = ContactUsImport.update({
  id: '/contact-us',
  path: '/contact-us',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const AboutUsRoute = AboutUsImport.update({
  id: '/about-us',
  path: '/about-us',
  getParentRoute: () => rootRoute,
} as any)

const LangRoute = LangImport.update({
  id: '/$lang',
  path: '/$lang',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AccountIndexRoute = AccountIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AccountRoute,
} as any)

const AccountStorageLazyRoute = AccountStorageLazyImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => AccountRoute,
} as any).lazy(() =>
  import('./routes/account/storage.lazy').then((d) => d.Route),
)

const EmailChangeRoute = EmailChangeImport.update({
  id: '/email/change',
  path: '/email/change',
  getParentRoute: () => rootRoute,
} as any)

const AccountSettingsRoute = AccountSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AccountRoute,
} as any)

const LangTermsRoute = LangTermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => LangRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/$lang': {
      id: '/$lang'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangImport
      parentRoute: typeof rootRoute
    }
    '/about-us': {
      id: '/about-us'
      path: '/about-us'
      fullPath: '/about-us'
      preLoaderRoute: typeof AboutUsImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/contact-us': {
      id: '/contact-us'
      path: '/contact-us'
      fullPath: '/contact-us'
      preLoaderRoute: typeof ContactUsImport
      parentRoute: typeof rootRoute
    }
    '/features': {
      id: '/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof FeaturesImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportImport
      parentRoute: typeof rootRoute
    }
    '/$lang/terms': {
      id: '/$lang/terms'
      path: '/terms'
      fullPath: '/$lang/terms'
      preLoaderRoute: typeof LangTermsImport
      parentRoute: typeof LangImport
    }
    '/account/settings': {
      id: '/account/settings'
      path: '/settings'
      fullPath: '/account/settings'
      preLoaderRoute: typeof AccountSettingsImport
      parentRoute: typeof AccountImport
    }
    '/email/change': {
      id: '/email/change'
      path: '/email/change'
      fullPath: '/email/change'
      preLoaderRoute: typeof EmailChangeImport
      parentRoute: typeof rootRoute
    }
    '/account/storage': {
      id: '/account/storage'
      path: '/storage'
      fullPath: '/account/storage'
      preLoaderRoute: typeof AccountStorageLazyImport
      parentRoute: typeof AccountImport
    }
    '/account/': {
      id: '/account/'
      path: '/'
      fullPath: '/account/'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof AccountImport
    }
  }
}

// Create and export the route tree

interface LangRouteChildren {
  LangTermsRoute: typeof LangTermsRoute
}

const LangRouteChildren: LangRouteChildren = {
  LangTermsRoute: LangTermsRoute,
}

const LangRouteWithChildren = LangRoute._addFileChildren(LangRouteChildren)

interface AccountRouteChildren {
  AccountSettingsRoute: typeof AccountSettingsRoute
  AccountStorageLazyRoute: typeof AccountStorageLazyRoute
  AccountIndexRoute: typeof AccountIndexRoute
}

const AccountRouteChildren: AccountRouteChildren = {
  AccountSettingsRoute: AccountSettingsRoute,
  AccountStorageLazyRoute: AccountStorageLazyRoute,
  AccountIndexRoute: AccountIndexRoute,
}

const AccountRouteWithChildren =
  AccountRoute._addFileChildren(AccountRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/$lang': typeof LangRouteWithChildren
  '/about-us': typeof AboutUsRoute
  '/account': typeof AccountRouteWithChildren
  '/contact-us': typeof ContactUsRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/support': typeof SupportRoute
  '/$lang/terms': typeof LangTermsRoute
  '/account/settings': typeof AccountSettingsRoute
  '/email/change': typeof EmailChangeRoute
  '/account/storage': typeof AccountStorageLazyRoute
  '/account/': typeof AccountIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/$lang': typeof LangRouteWithChildren
  '/about-us': typeof AboutUsRoute
  '/contact-us': typeof ContactUsRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/support': typeof SupportRoute
  '/$lang/terms': typeof LangTermsRoute
  '/account/settings': typeof AccountSettingsRoute
  '/email/change': typeof EmailChangeRoute
  '/account/storage': typeof AccountStorageLazyRoute
  '/account': typeof AccountIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/$lang': typeof LangRouteWithChildren
  '/about-us': typeof AboutUsRoute
  '/account': typeof AccountRouteWithChildren
  '/contact-us': typeof ContactUsRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/support': typeof SupportRoute
  '/$lang/terms': typeof LangTermsRoute
  '/account/settings': typeof AccountSettingsRoute
  '/email/change': typeof EmailChangeRoute
  '/account/storage': typeof AccountStorageLazyRoute
  '/account/': typeof AccountIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$lang'
    | '/about-us'
    | '/account'
    | '/contact-us'
    | '/features'
    | '/login'
    | '/register'
    | '/support'
    | '/$lang/terms'
    | '/account/settings'
    | '/email/change'
    | '/account/storage'
    | '/account/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$lang'
    | '/about-us'
    | '/contact-us'
    | '/features'
    | '/login'
    | '/register'
    | '/support'
    | '/$lang/terms'
    | '/account/settings'
    | '/email/change'
    | '/account/storage'
    | '/account'
  id:
    | '__root__'
    | '/'
    | '/$lang'
    | '/about-us'
    | '/account'
    | '/contact-us'
    | '/features'
    | '/login'
    | '/register'
    | '/support'
    | '/$lang/terms'
    | '/account/settings'
    | '/email/change'
    | '/account/storage'
    | '/account/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LangRoute: typeof LangRouteWithChildren
  AboutUsRoute: typeof AboutUsRoute
  AccountRoute: typeof AccountRouteWithChildren
  ContactUsRoute: typeof ContactUsRoute
  FeaturesRoute: typeof FeaturesRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  SupportRoute: typeof SupportRoute
  EmailChangeRoute: typeof EmailChangeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LangRoute: LangRouteWithChildren,
  AboutUsRoute: AboutUsRoute,
  AccountRoute: AccountRouteWithChildren,
  ContactUsRoute: ContactUsRoute,
  FeaturesRoute: FeaturesRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SupportRoute: SupportRoute,
  EmailChangeRoute: EmailChangeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$lang",
        "/about-us",
        "/account",
        "/contact-us",
        "/features",
        "/login",
        "/register",
        "/support",
        "/email/change"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/$lang": {
      "filePath": "$lang.tsx",
      "children": [
        "/$lang/terms"
      ]
    },
    "/about-us": {
      "filePath": "about-us.tsx"
    },
    "/account": {
      "filePath": "account.tsx",
      "children": [
        "/account/settings",
        "/account/storage",
        "/account/"
      ]
    },
    "/contact-us": {
      "filePath": "contact-us.tsx"
    },
    "/features": {
      "filePath": "features.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/support": {
      "filePath": "support.tsx"
    },
    "/$lang/terms": {
      "filePath": "$lang/terms.tsx",
      "parent": "/$lang"
    },
    "/account/settings": {
      "filePath": "account/settings.tsx",
      "parent": "/account"
    },
    "/email/change": {
      "filePath": "email.change.tsx"
    },
    "/account/storage": {
      "filePath": "account/storage.lazy.tsx",
      "parent": "/account"
    },
    "/account/": {
      "filePath": "account/index.tsx",
      "parent": "/account"
    }
  }
}
ROUTE_MANIFEST_END */
