/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as BuilderImport } from './routes/builder'
import { Route as AuthImport } from './routes/auth'
import { Route as AnalyticsImport } from './routes/analytics'
import { Route as MemberOnlyImport } from './routes/_memberOnly'
import { Route as LandingImport } from './routes/_landing'
import { Route as PlayerIndexImport } from './routes/player/index'
import { Route as AnalyticsIndexImport } from './routes/analytics/index'
import { Route as LandingIndexImport } from './routes/_landing/index'
import { Route as EmailChangeImport } from './routes/email.change'
import { Route as BuilderMapImport } from './routes/builder.map'
import { Route as BuilderLayoutImport } from './routes/builder/_layout'
import { Route as AuthSuccessImport } from './routes/auth/success'
import { Route as AuthSigninImport } from './routes/auth/signin'
import { Route as AuthResetPasswordImport } from './routes/auth/reset-password'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as MemberOnlyHomeImport } from './routes/_memberOnly/home'
import { Route as LandingTermsImport } from './routes/_landing/terms'
import { Route as LandingSupportImport } from './routes/_landing/support'
import { Route as LandingPolicyImport } from './routes/_landing/policy'
import { Route as LandingFeaturesImport } from './routes/_landing/features'
import { Route as LandingDisclaimerImport } from './routes/_landing/disclaimer'
import { Route as LandingContactUsImport } from './routes/_landing/contact-us'
import { Route as LandingAboutUsImport } from './routes/_landing/about-us'
import { Route as PlayerRootIdIndexImport } from './routes/player/$rootId/index'
import { Route as BuilderLayoutIndexImport } from './routes/builder/_layout/index'
import { Route as PlayerRootIdItemIdImport } from './routes/player/$rootId/$itemId'
import { Route as BuilderItemsItemIdImport } from './routes/builder/items/$itemId'
import { Route as BuilderLayoutRecycledImport } from './routes/builder/_layout/recycled'
import { Route as BuilderLayoutPublishedImport } from './routes/builder/_layout/published'
import { Route as BuilderLayoutBookmarksImport } from './routes/builder/_layout/bookmarks'
import { Route as AnalyticsItemsItemIdImport } from './routes/analytics/items/$itemId'
import { Route as MemberOnlyAccountStorageImport } from './routes/_memberOnly/account/storage'
import { Route as MemberOnlyAccountStatsImport } from './routes/_memberOnly/account/stats'
import { Route as MemberOnlyAccountSettingsImport } from './routes/_memberOnly/account/settings'
import { Route as PlayerRootIdItemIdIndexImport } from './routes/player/$rootId/$itemId/index'
import { Route as BuilderItemsItemIdIndexImport } from './routes/builder/items/$itemId/index'
import { Route as AnalyticsItemsItemIdIndexImport } from './routes/analytics/items/$itemId/index'
import { Route as PlayerRootIdItemIdAutoLoginImport } from './routes/player/$rootId/$itemId/autoLogin'
import { Route as BuilderItemsItemIdItemPageImport } from './routes/builder/items/$itemId/_itemPage'
import { Route as AnalyticsItemsItemIdUsersImport } from './routes/analytics/items/$itemId/users'
import { Route as AnalyticsItemsItemIdItemsImport } from './routes/analytics/items/$itemId/items'
import { Route as AnalyticsItemsItemIdExportImport } from './routes/analytics/items/$itemId/export'
import { Route as AnalyticsItemsItemIdAppsImport } from './routes/analytics/items/$itemId/apps'
import { Route as BuilderItemsItemIdItemPageShareImport } from './routes/builder/items/$itemId/_itemPage/share'
import { Route as BuilderItemsItemIdItemPageSettingsImport } from './routes/builder/items/$itemId/_itemPage/settings'
import { Route as BuilderItemsItemIdItemPagePublishImport } from './routes/builder/items/$itemId/_itemPage/publish'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const BuilderRoute = BuilderImport.update({
  id: '/builder',
  path: '/builder',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsRoute = AnalyticsImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => rootRoute,
} as any)

const MemberOnlyRoute = MemberOnlyImport.update({
  id: '/_memberOnly',
  getParentRoute: () => rootRoute,
} as any)

const LandingRoute = LandingImport.update({
  id: '/_landing',
  getParentRoute: () => rootRoute,
} as any)

const PlayerIndexRoute = PlayerIndexImport.update({
  id: '/player/',
  path: '/player/',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsIndexRoute = AnalyticsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AnalyticsRoute,
} as any)

const LandingIndexRoute = LandingIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LandingRoute,
} as any)

const EmailChangeRoute = EmailChangeImport.update({
  id: '/email/change',
  path: '/email/change',
  getParentRoute: () => rootRoute,
} as any)

const BuilderMapRoute = BuilderMapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => BuilderRoute,
} as any)

const BuilderLayoutRoute = BuilderLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => BuilderRoute,
} as any)

const AuthSuccessRoute = AuthSuccessImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSigninRoute = AuthSigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => AuthRoute,
} as any)

const AuthResetPasswordRoute = AuthResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)

const MemberOnlyHomeRoute = MemberOnlyHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => MemberOnlyRoute,
} as any)

const LandingTermsRoute = LandingTermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => LandingRoute,
} as any)

const LandingSupportRoute = LandingSupportImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => LandingRoute,
} as any)

const LandingPolicyRoute = LandingPolicyImport.update({
  id: '/policy',
  path: '/policy',
  getParentRoute: () => LandingRoute,
} as any)

const LandingFeaturesRoute = LandingFeaturesImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => LandingRoute,
} as any)

const LandingDisclaimerRoute = LandingDisclaimerImport.update({
  id: '/disclaimer',
  path: '/disclaimer',
  getParentRoute: () => LandingRoute,
} as any)

const LandingContactUsRoute = LandingContactUsImport.update({
  id: '/contact-us',
  path: '/contact-us',
  getParentRoute: () => LandingRoute,
} as any)

const LandingAboutUsRoute = LandingAboutUsImport.update({
  id: '/about-us',
  path: '/about-us',
  getParentRoute: () => LandingRoute,
} as any)

const PlayerRootIdIndexRoute = PlayerRootIdIndexImport.update({
  id: '/player/$rootId/',
  path: '/player/$rootId/',
  getParentRoute: () => rootRoute,
} as any)

const BuilderLayoutIndexRoute = BuilderLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BuilderLayoutRoute,
} as any)

const PlayerRootIdItemIdRoute = PlayerRootIdItemIdImport.update({
  id: '/player/$rootId/$itemId',
  path: '/player/$rootId/$itemId',
  getParentRoute: () => rootRoute,
} as any)

const BuilderItemsItemIdRoute = BuilderItemsItemIdImport.update({
  id: '/items/$itemId',
  path: '/items/$itemId',
  getParentRoute: () => BuilderRoute,
} as any)

const BuilderLayoutRecycledRoute = BuilderLayoutRecycledImport.update({
  id: '/recycled',
  path: '/recycled',
  getParentRoute: () => BuilderLayoutRoute,
} as any)

const BuilderLayoutPublishedRoute = BuilderLayoutPublishedImport.update({
  id: '/published',
  path: '/published',
  getParentRoute: () => BuilderLayoutRoute,
} as any)

const BuilderLayoutBookmarksRoute = BuilderLayoutBookmarksImport.update({
  id: '/bookmarks',
  path: '/bookmarks',
  getParentRoute: () => BuilderLayoutRoute,
} as any)

const AnalyticsItemsItemIdRoute = AnalyticsItemsItemIdImport.update({
  id: '/items/$itemId',
  path: '/items/$itemId',
  getParentRoute: () => AnalyticsRoute,
} as any)

const MemberOnlyAccountStorageRoute = MemberOnlyAccountStorageImport.update({
  id: '/account/storage',
  path: '/account/storage',
  getParentRoute: () => MemberOnlyRoute,
} as any)

const MemberOnlyAccountStatsRoute = MemberOnlyAccountStatsImport.update({
  id: '/account/stats',
  path: '/account/stats',
  getParentRoute: () => MemberOnlyRoute,
} as any)

const MemberOnlyAccountSettingsRoute = MemberOnlyAccountSettingsImport.update({
  id: '/account/settings',
  path: '/account/settings',
  getParentRoute: () => MemberOnlyRoute,
} as any)

const PlayerRootIdItemIdIndexRoute = PlayerRootIdItemIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlayerRootIdItemIdRoute,
} as any)

const BuilderItemsItemIdIndexRoute = BuilderItemsItemIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BuilderItemsItemIdRoute,
} as any)

const AnalyticsItemsItemIdIndexRoute = AnalyticsItemsItemIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AnalyticsItemsItemIdRoute,
} as any)

const PlayerRootIdItemIdAutoLoginRoute =
  PlayerRootIdItemIdAutoLoginImport.update({
    id: '/autoLogin',
    path: '/autoLogin',
    getParentRoute: () => PlayerRootIdItemIdRoute,
  } as any)

const BuilderItemsItemIdItemPageRoute = BuilderItemsItemIdItemPageImport.update(
  {
    id: '/_itemPage',
    getParentRoute: () => BuilderItemsItemIdRoute,
  } as any,
)

const AnalyticsItemsItemIdUsersRoute = AnalyticsItemsItemIdUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AnalyticsItemsItemIdRoute,
} as any)

const AnalyticsItemsItemIdItemsRoute = AnalyticsItemsItemIdItemsImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => AnalyticsItemsItemIdRoute,
} as any)

const AnalyticsItemsItemIdExportRoute = AnalyticsItemsItemIdExportImport.update(
  {
    id: '/export',
    path: '/export',
    getParentRoute: () => AnalyticsItemsItemIdRoute,
  } as any,
)

const AnalyticsItemsItemIdAppsRoute = AnalyticsItemsItemIdAppsImport.update({
  id: '/apps',
  path: '/apps',
  getParentRoute: () => AnalyticsItemsItemIdRoute,
} as any)

const BuilderItemsItemIdItemPageShareRoute =
  BuilderItemsItemIdItemPageShareImport.update({
    id: '/share',
    path: '/share',
    getParentRoute: () => BuilderItemsItemIdItemPageRoute,
  } as any)

const BuilderItemsItemIdItemPageSettingsRoute =
  BuilderItemsItemIdItemPageSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => BuilderItemsItemIdItemPageRoute,
  } as any)

const BuilderItemsItemIdItemPagePublishRoute =
  BuilderItemsItemIdItemPagePublishImport.update({
    id: '/publish',
    path: '/publish',
    getParentRoute: () => BuilderItemsItemIdItemPageRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_landing': {
      id: '/_landing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/_memberOnly': {
      id: '/_memberOnly'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MemberOnlyImport
      parentRoute: typeof rootRoute
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/builder': {
      id: '/builder'
      path: '/builder'
      fullPath: '/builder'
      preLoaderRoute: typeof BuilderImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/_landing/about-us': {
      id: '/_landing/about-us'
      path: '/about-us'
      fullPath: '/about-us'
      preLoaderRoute: typeof LandingAboutUsImport
      parentRoute: typeof LandingImport
    }
    '/_landing/contact-us': {
      id: '/_landing/contact-us'
      path: '/contact-us'
      fullPath: '/contact-us'
      preLoaderRoute: typeof LandingContactUsImport
      parentRoute: typeof LandingImport
    }
    '/_landing/disclaimer': {
      id: '/_landing/disclaimer'
      path: '/disclaimer'
      fullPath: '/disclaimer'
      preLoaderRoute: typeof LandingDisclaimerImport
      parentRoute: typeof LandingImport
    }
    '/_landing/features': {
      id: '/_landing/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof LandingFeaturesImport
      parentRoute: typeof LandingImport
    }
    '/_landing/policy': {
      id: '/_landing/policy'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof LandingPolicyImport
      parentRoute: typeof LandingImport
    }
    '/_landing/support': {
      id: '/_landing/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof LandingSupportImport
      parentRoute: typeof LandingImport
    }
    '/_landing/terms': {
      id: '/_landing/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof LandingTermsImport
      parentRoute: typeof LandingImport
    }
    '/_memberOnly/home': {
      id: '/_memberOnly/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof MemberOnlyHomeImport
      parentRoute: typeof MemberOnlyImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordImport
      parentRoute: typeof AuthImport
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninImport
      parentRoute: typeof AuthImport
    }
    '/auth/success': {
      id: '/auth/success'
      path: '/success'
      fullPath: '/auth/success'
      preLoaderRoute: typeof AuthSuccessImport
      parentRoute: typeof AuthImport
    }
    '/builder/_layout': {
      id: '/builder/_layout'
      path: ''
      fullPath: '/builder'
      preLoaderRoute: typeof BuilderLayoutImport
      parentRoute: typeof BuilderImport
    }
    '/builder/map': {
      id: '/builder/map'
      path: '/map'
      fullPath: '/builder/map'
      preLoaderRoute: typeof BuilderMapImport
      parentRoute: typeof BuilderImport
    }
    '/email/change': {
      id: '/email/change'
      path: '/email/change'
      fullPath: '/email/change'
      preLoaderRoute: typeof EmailChangeImport
      parentRoute: typeof rootRoute
    }
    '/_landing/': {
      id: '/_landing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LandingIndexImport
      parentRoute: typeof LandingImport
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/'
      fullPath: '/analytics/'
      preLoaderRoute: typeof AnalyticsIndexImport
      parentRoute: typeof AnalyticsImport
    }
    '/player/': {
      id: '/player/'
      path: '/player'
      fullPath: '/player'
      preLoaderRoute: typeof PlayerIndexImport
      parentRoute: typeof rootRoute
    }
    '/_memberOnly/account/settings': {
      id: '/_memberOnly/account/settings'
      path: '/account/settings'
      fullPath: '/account/settings'
      preLoaderRoute: typeof MemberOnlyAccountSettingsImport
      parentRoute: typeof MemberOnlyImport
    }
    '/_memberOnly/account/stats': {
      id: '/_memberOnly/account/stats'
      path: '/account/stats'
      fullPath: '/account/stats'
      preLoaderRoute: typeof MemberOnlyAccountStatsImport
      parentRoute: typeof MemberOnlyImport
    }
    '/_memberOnly/account/storage': {
      id: '/_memberOnly/account/storage'
      path: '/account/storage'
      fullPath: '/account/storage'
      preLoaderRoute: typeof MemberOnlyAccountStorageImport
      parentRoute: typeof MemberOnlyImport
    }
    '/analytics/items/$itemId': {
      id: '/analytics/items/$itemId'
      path: '/items/$itemId'
      fullPath: '/analytics/items/$itemId'
      preLoaderRoute: typeof AnalyticsItemsItemIdImport
      parentRoute: typeof AnalyticsImport
    }
    '/builder/_layout/bookmarks': {
      id: '/builder/_layout/bookmarks'
      path: '/bookmarks'
      fullPath: '/builder/bookmarks'
      preLoaderRoute: typeof BuilderLayoutBookmarksImport
      parentRoute: typeof BuilderLayoutImport
    }
    '/builder/_layout/published': {
      id: '/builder/_layout/published'
      path: '/published'
      fullPath: '/builder/published'
      preLoaderRoute: typeof BuilderLayoutPublishedImport
      parentRoute: typeof BuilderLayoutImport
    }
    '/builder/_layout/recycled': {
      id: '/builder/_layout/recycled'
      path: '/recycled'
      fullPath: '/builder/recycled'
      preLoaderRoute: typeof BuilderLayoutRecycledImport
      parentRoute: typeof BuilderLayoutImport
    }
    '/builder/items/$itemId': {
      id: '/builder/items/$itemId'
      path: '/items/$itemId'
      fullPath: '/builder/items/$itemId'
      preLoaderRoute: typeof BuilderItemsItemIdImport
      parentRoute: typeof BuilderImport
    }
    '/player/$rootId/$itemId': {
      id: '/player/$rootId/$itemId'
      path: '/player/$rootId/$itemId'
      fullPath: '/player/$rootId/$itemId'
      preLoaderRoute: typeof PlayerRootIdItemIdImport
      parentRoute: typeof rootRoute
    }
    '/builder/_layout/': {
      id: '/builder/_layout/'
      path: '/'
      fullPath: '/builder/'
      preLoaderRoute: typeof BuilderLayoutIndexImport
      parentRoute: typeof BuilderLayoutImport
    }
    '/player/$rootId/': {
      id: '/player/$rootId/'
      path: '/player/$rootId'
      fullPath: '/player/$rootId'
      preLoaderRoute: typeof PlayerRootIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/analytics/items/$itemId/apps': {
      id: '/analytics/items/$itemId/apps'
      path: '/apps'
      fullPath: '/analytics/items/$itemId/apps'
      preLoaderRoute: typeof AnalyticsItemsItemIdAppsImport
      parentRoute: typeof AnalyticsItemsItemIdImport
    }
    '/analytics/items/$itemId/export': {
      id: '/analytics/items/$itemId/export'
      path: '/export'
      fullPath: '/analytics/items/$itemId/export'
      preLoaderRoute: typeof AnalyticsItemsItemIdExportImport
      parentRoute: typeof AnalyticsItemsItemIdImport
    }
    '/analytics/items/$itemId/items': {
      id: '/analytics/items/$itemId/items'
      path: '/items'
      fullPath: '/analytics/items/$itemId/items'
      preLoaderRoute: typeof AnalyticsItemsItemIdItemsImport
      parentRoute: typeof AnalyticsItemsItemIdImport
    }
    '/analytics/items/$itemId/users': {
      id: '/analytics/items/$itemId/users'
      path: '/users'
      fullPath: '/analytics/items/$itemId/users'
      preLoaderRoute: typeof AnalyticsItemsItemIdUsersImport
      parentRoute: typeof AnalyticsItemsItemIdImport
    }
    '/builder/items/$itemId/_itemPage': {
      id: '/builder/items/$itemId/_itemPage'
      path: ''
      fullPath: '/builder/items/$itemId'
      preLoaderRoute: typeof BuilderItemsItemIdItemPageImport
      parentRoute: typeof BuilderItemsItemIdImport
    }
    '/player/$rootId/$itemId/autoLogin': {
      id: '/player/$rootId/$itemId/autoLogin'
      path: '/autoLogin'
      fullPath: '/player/$rootId/$itemId/autoLogin'
      preLoaderRoute: typeof PlayerRootIdItemIdAutoLoginImport
      parentRoute: typeof PlayerRootIdItemIdImport
    }
    '/analytics/items/$itemId/': {
      id: '/analytics/items/$itemId/'
      path: '/'
      fullPath: '/analytics/items/$itemId/'
      preLoaderRoute: typeof AnalyticsItemsItemIdIndexImport
      parentRoute: typeof AnalyticsItemsItemIdImport
    }
    '/builder/items/$itemId/': {
      id: '/builder/items/$itemId/'
      path: '/'
      fullPath: '/builder/items/$itemId/'
      preLoaderRoute: typeof BuilderItemsItemIdIndexImport
      parentRoute: typeof BuilderItemsItemIdImport
    }
    '/player/$rootId/$itemId/': {
      id: '/player/$rootId/$itemId/'
      path: '/'
      fullPath: '/player/$rootId/$itemId/'
      preLoaderRoute: typeof PlayerRootIdItemIdIndexImport
      parentRoute: typeof PlayerRootIdItemIdImport
    }
    '/builder/items/$itemId/_itemPage/publish': {
      id: '/builder/items/$itemId/_itemPage/publish'
      path: '/publish'
      fullPath: '/builder/items/$itemId/publish'
      preLoaderRoute: typeof BuilderItemsItemIdItemPagePublishImport
      parentRoute: typeof BuilderItemsItemIdItemPageImport
    }
    '/builder/items/$itemId/_itemPage/settings': {
      id: '/builder/items/$itemId/_itemPage/settings'
      path: '/settings'
      fullPath: '/builder/items/$itemId/settings'
      preLoaderRoute: typeof BuilderItemsItemIdItemPageSettingsImport
      parentRoute: typeof BuilderItemsItemIdItemPageImport
    }
    '/builder/items/$itemId/_itemPage/share': {
      id: '/builder/items/$itemId/_itemPage/share'
      path: '/share'
      fullPath: '/builder/items/$itemId/share'
      preLoaderRoute: typeof BuilderItemsItemIdItemPageShareImport
      parentRoute: typeof BuilderItemsItemIdItemPageImport
    }
  }
}

// Create and export the route tree

interface LandingRouteChildren {
  LandingAboutUsRoute: typeof LandingAboutUsRoute
  LandingContactUsRoute: typeof LandingContactUsRoute
  LandingDisclaimerRoute: typeof LandingDisclaimerRoute
  LandingFeaturesRoute: typeof LandingFeaturesRoute
  LandingPolicyRoute: typeof LandingPolicyRoute
  LandingSupportRoute: typeof LandingSupportRoute
  LandingTermsRoute: typeof LandingTermsRoute
  LandingIndexRoute: typeof LandingIndexRoute
}

const LandingRouteChildren: LandingRouteChildren = {
  LandingAboutUsRoute: LandingAboutUsRoute,
  LandingContactUsRoute: LandingContactUsRoute,
  LandingDisclaimerRoute: LandingDisclaimerRoute,
  LandingFeaturesRoute: LandingFeaturesRoute,
  LandingPolicyRoute: LandingPolicyRoute,
  LandingSupportRoute: LandingSupportRoute,
  LandingTermsRoute: LandingTermsRoute,
  LandingIndexRoute: LandingIndexRoute,
}

const LandingRouteWithChildren =
  LandingRoute._addFileChildren(LandingRouteChildren)

interface MemberOnlyRouteChildren {
  MemberOnlyHomeRoute: typeof MemberOnlyHomeRoute
  MemberOnlyAccountSettingsRoute: typeof MemberOnlyAccountSettingsRoute
  MemberOnlyAccountStatsRoute: typeof MemberOnlyAccountStatsRoute
  MemberOnlyAccountStorageRoute: typeof MemberOnlyAccountStorageRoute
}

const MemberOnlyRouteChildren: MemberOnlyRouteChildren = {
  MemberOnlyHomeRoute: MemberOnlyHomeRoute,
  MemberOnlyAccountSettingsRoute: MemberOnlyAccountSettingsRoute,
  MemberOnlyAccountStatsRoute: MemberOnlyAccountStatsRoute,
  MemberOnlyAccountStorageRoute: MemberOnlyAccountStorageRoute,
}

const MemberOnlyRouteWithChildren = MemberOnlyRoute._addFileChildren(
  MemberOnlyRouteChildren,
)

interface AnalyticsItemsItemIdRouteChildren {
  AnalyticsItemsItemIdAppsRoute: typeof AnalyticsItemsItemIdAppsRoute
  AnalyticsItemsItemIdExportRoute: typeof AnalyticsItemsItemIdExportRoute
  AnalyticsItemsItemIdItemsRoute: typeof AnalyticsItemsItemIdItemsRoute
  AnalyticsItemsItemIdUsersRoute: typeof AnalyticsItemsItemIdUsersRoute
  AnalyticsItemsItemIdIndexRoute: typeof AnalyticsItemsItemIdIndexRoute
}

const AnalyticsItemsItemIdRouteChildren: AnalyticsItemsItemIdRouteChildren = {
  AnalyticsItemsItemIdAppsRoute: AnalyticsItemsItemIdAppsRoute,
  AnalyticsItemsItemIdExportRoute: AnalyticsItemsItemIdExportRoute,
  AnalyticsItemsItemIdItemsRoute: AnalyticsItemsItemIdItemsRoute,
  AnalyticsItemsItemIdUsersRoute: AnalyticsItemsItemIdUsersRoute,
  AnalyticsItemsItemIdIndexRoute: AnalyticsItemsItemIdIndexRoute,
}

const AnalyticsItemsItemIdRouteWithChildren =
  AnalyticsItemsItemIdRoute._addFileChildren(AnalyticsItemsItemIdRouteChildren)

interface AnalyticsRouteChildren {
  AnalyticsIndexRoute: typeof AnalyticsIndexRoute
  AnalyticsItemsItemIdRoute: typeof AnalyticsItemsItemIdRouteWithChildren
}

const AnalyticsRouteChildren: AnalyticsRouteChildren = {
  AnalyticsIndexRoute: AnalyticsIndexRoute,
  AnalyticsItemsItemIdRoute: AnalyticsItemsItemIdRouteWithChildren,
}

const AnalyticsRouteWithChildren = AnalyticsRoute._addFileChildren(
  AnalyticsRouteChildren,
)

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSuccessRoute: typeof AuthSuccessRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSuccessRoute: AuthSuccessRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface BuilderLayoutRouteChildren {
  BuilderLayoutBookmarksRoute: typeof BuilderLayoutBookmarksRoute
  BuilderLayoutPublishedRoute: typeof BuilderLayoutPublishedRoute
  BuilderLayoutRecycledRoute: typeof BuilderLayoutRecycledRoute
  BuilderLayoutIndexRoute: typeof BuilderLayoutIndexRoute
}

const BuilderLayoutRouteChildren: BuilderLayoutRouteChildren = {
  BuilderLayoutBookmarksRoute: BuilderLayoutBookmarksRoute,
  BuilderLayoutPublishedRoute: BuilderLayoutPublishedRoute,
  BuilderLayoutRecycledRoute: BuilderLayoutRecycledRoute,
  BuilderLayoutIndexRoute: BuilderLayoutIndexRoute,
}

const BuilderLayoutRouteWithChildren = BuilderLayoutRoute._addFileChildren(
  BuilderLayoutRouteChildren,
)

interface BuilderItemsItemIdItemPageRouteChildren {
  BuilderItemsItemIdItemPagePublishRoute: typeof BuilderItemsItemIdItemPagePublishRoute
  BuilderItemsItemIdItemPageSettingsRoute: typeof BuilderItemsItemIdItemPageSettingsRoute
  BuilderItemsItemIdItemPageShareRoute: typeof BuilderItemsItemIdItemPageShareRoute
}

const BuilderItemsItemIdItemPageRouteChildren: BuilderItemsItemIdItemPageRouteChildren =
  {
    BuilderItemsItemIdItemPagePublishRoute:
      BuilderItemsItemIdItemPagePublishRoute,
    BuilderItemsItemIdItemPageSettingsRoute:
      BuilderItemsItemIdItemPageSettingsRoute,
    BuilderItemsItemIdItemPageShareRoute: BuilderItemsItemIdItemPageShareRoute,
  }

const BuilderItemsItemIdItemPageRouteWithChildren =
  BuilderItemsItemIdItemPageRoute._addFileChildren(
    BuilderItemsItemIdItemPageRouteChildren,
  )

interface BuilderItemsItemIdRouteChildren {
  BuilderItemsItemIdItemPageRoute: typeof BuilderItemsItemIdItemPageRouteWithChildren
  BuilderItemsItemIdIndexRoute: typeof BuilderItemsItemIdIndexRoute
}

const BuilderItemsItemIdRouteChildren: BuilderItemsItemIdRouteChildren = {
  BuilderItemsItemIdItemPageRoute: BuilderItemsItemIdItemPageRouteWithChildren,
  BuilderItemsItemIdIndexRoute: BuilderItemsItemIdIndexRoute,
}

const BuilderItemsItemIdRouteWithChildren =
  BuilderItemsItemIdRoute._addFileChildren(BuilderItemsItemIdRouteChildren)

interface BuilderRouteChildren {
  BuilderLayoutRoute: typeof BuilderLayoutRouteWithChildren
  BuilderMapRoute: typeof BuilderMapRoute
  BuilderItemsItemIdRoute: typeof BuilderItemsItemIdRouteWithChildren
}

const BuilderRouteChildren: BuilderRouteChildren = {
  BuilderLayoutRoute: BuilderLayoutRouteWithChildren,
  BuilderMapRoute: BuilderMapRoute,
  BuilderItemsItemIdRoute: BuilderItemsItemIdRouteWithChildren,
}

const BuilderRouteWithChildren =
  BuilderRoute._addFileChildren(BuilderRouteChildren)

interface PlayerRootIdItemIdRouteChildren {
  PlayerRootIdItemIdAutoLoginRoute: typeof PlayerRootIdItemIdAutoLoginRoute
  PlayerRootIdItemIdIndexRoute: typeof PlayerRootIdItemIdIndexRoute
}

const PlayerRootIdItemIdRouteChildren: PlayerRootIdItemIdRouteChildren = {
  PlayerRootIdItemIdAutoLoginRoute: PlayerRootIdItemIdAutoLoginRoute,
  PlayerRootIdItemIdIndexRoute: PlayerRootIdItemIdIndexRoute,
}

const PlayerRootIdItemIdRouteWithChildren =
  PlayerRootIdItemIdRoute._addFileChildren(PlayerRootIdItemIdRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MemberOnlyRouteWithChildren
  '/analytics': typeof AnalyticsRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/builder': typeof BuilderLayoutRouteWithChildren
  '/signin': typeof SigninRoute
  '/about-us': typeof LandingAboutUsRoute
  '/contact-us': typeof LandingContactUsRoute
  '/disclaimer': typeof LandingDisclaimerRoute
  '/features': typeof LandingFeaturesRoute
  '/policy': typeof LandingPolicyRoute
  '/support': typeof LandingSupportRoute
  '/terms': typeof LandingTermsRoute
  '/home': typeof MemberOnlyHomeRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/success': typeof AuthSuccessRoute
  '/builder/map': typeof BuilderMapRoute
  '/email/change': typeof EmailChangeRoute
  '/': typeof LandingIndexRoute
  '/analytics/': typeof AnalyticsIndexRoute
  '/player': typeof PlayerIndexRoute
  '/account/settings': typeof MemberOnlyAccountSettingsRoute
  '/account/stats': typeof MemberOnlyAccountStatsRoute
  '/account/storage': typeof MemberOnlyAccountStorageRoute
  '/analytics/items/$itemId': typeof AnalyticsItemsItemIdRouteWithChildren
  '/builder/bookmarks': typeof BuilderLayoutBookmarksRoute
  '/builder/published': typeof BuilderLayoutPublishedRoute
  '/builder/recycled': typeof BuilderLayoutRecycledRoute
  '/builder/items/$itemId': typeof BuilderItemsItemIdItemPageRouteWithChildren
  '/player/$rootId/$itemId': typeof PlayerRootIdItemIdRouteWithChildren
  '/builder/': typeof BuilderLayoutIndexRoute
  '/player/$rootId': typeof PlayerRootIdIndexRoute
  '/analytics/items/$itemId/apps': typeof AnalyticsItemsItemIdAppsRoute
  '/analytics/items/$itemId/export': typeof AnalyticsItemsItemIdExportRoute
  '/analytics/items/$itemId/items': typeof AnalyticsItemsItemIdItemsRoute
  '/analytics/items/$itemId/users': typeof AnalyticsItemsItemIdUsersRoute
  '/player/$rootId/$itemId/autoLogin': typeof PlayerRootIdItemIdAutoLoginRoute
  '/analytics/items/$itemId/': typeof AnalyticsItemsItemIdIndexRoute
  '/builder/items/$itemId/': typeof BuilderItemsItemIdIndexRoute
  '/player/$rootId/$itemId/': typeof PlayerRootIdItemIdIndexRoute
  '/builder/items/$itemId/publish': typeof BuilderItemsItemIdItemPagePublishRoute
  '/builder/items/$itemId/settings': typeof BuilderItemsItemIdItemPageSettingsRoute
  '/builder/items/$itemId/share': typeof BuilderItemsItemIdItemPageShareRoute
}

export interface FileRoutesByTo {
  '': typeof MemberOnlyRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/builder': typeof BuilderLayoutIndexRoute
  '/signin': typeof SigninRoute
  '/about-us': typeof LandingAboutUsRoute
  '/contact-us': typeof LandingContactUsRoute
  '/disclaimer': typeof LandingDisclaimerRoute
  '/features': typeof LandingFeaturesRoute
  '/policy': typeof LandingPolicyRoute
  '/support': typeof LandingSupportRoute
  '/terms': typeof LandingTermsRoute
  '/home': typeof MemberOnlyHomeRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/success': typeof AuthSuccessRoute
  '/builder/map': typeof BuilderMapRoute
  '/email/change': typeof EmailChangeRoute
  '/': typeof LandingIndexRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/player': typeof PlayerIndexRoute
  '/account/settings': typeof MemberOnlyAccountSettingsRoute
  '/account/stats': typeof MemberOnlyAccountStatsRoute
  '/account/storage': typeof MemberOnlyAccountStorageRoute
  '/builder/bookmarks': typeof BuilderLayoutBookmarksRoute
  '/builder/published': typeof BuilderLayoutPublishedRoute
  '/builder/recycled': typeof BuilderLayoutRecycledRoute
  '/player/$rootId': typeof PlayerRootIdIndexRoute
  '/analytics/items/$itemId/apps': typeof AnalyticsItemsItemIdAppsRoute
  '/analytics/items/$itemId/export': typeof AnalyticsItemsItemIdExportRoute
  '/analytics/items/$itemId/items': typeof AnalyticsItemsItemIdItemsRoute
  '/analytics/items/$itemId/users': typeof AnalyticsItemsItemIdUsersRoute
  '/builder/items/$itemId': typeof BuilderItemsItemIdIndexRoute
  '/player/$rootId/$itemId/autoLogin': typeof PlayerRootIdItemIdAutoLoginRoute
  '/analytics/items/$itemId': typeof AnalyticsItemsItemIdIndexRoute
  '/player/$rootId/$itemId': typeof PlayerRootIdItemIdIndexRoute
  '/builder/items/$itemId/publish': typeof BuilderItemsItemIdItemPagePublishRoute
  '/builder/items/$itemId/settings': typeof BuilderItemsItemIdItemPageSettingsRoute
  '/builder/items/$itemId/share': typeof BuilderItemsItemIdItemPageShareRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_landing': typeof LandingRouteWithChildren
  '/_memberOnly': typeof MemberOnlyRouteWithChildren
  '/analytics': typeof AnalyticsRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/builder': typeof BuilderRouteWithChildren
  '/signin': typeof SigninRoute
  '/_landing/about-us': typeof LandingAboutUsRoute
  '/_landing/contact-us': typeof LandingContactUsRoute
  '/_landing/disclaimer': typeof LandingDisclaimerRoute
  '/_landing/features': typeof LandingFeaturesRoute
  '/_landing/policy': typeof LandingPolicyRoute
  '/_landing/support': typeof LandingSupportRoute
  '/_landing/terms': typeof LandingTermsRoute
  '/_memberOnly/home': typeof MemberOnlyHomeRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/success': typeof AuthSuccessRoute
  '/builder/_layout': typeof BuilderLayoutRouteWithChildren
  '/builder/map': typeof BuilderMapRoute
  '/email/change': typeof EmailChangeRoute
  '/_landing/': typeof LandingIndexRoute
  '/analytics/': typeof AnalyticsIndexRoute
  '/player/': typeof PlayerIndexRoute
  '/_memberOnly/account/settings': typeof MemberOnlyAccountSettingsRoute
  '/_memberOnly/account/stats': typeof MemberOnlyAccountStatsRoute
  '/_memberOnly/account/storage': typeof MemberOnlyAccountStorageRoute
  '/analytics/items/$itemId': typeof AnalyticsItemsItemIdRouteWithChildren
  '/builder/_layout/bookmarks': typeof BuilderLayoutBookmarksRoute
  '/builder/_layout/published': typeof BuilderLayoutPublishedRoute
  '/builder/_layout/recycled': typeof BuilderLayoutRecycledRoute
  '/builder/items/$itemId': typeof BuilderItemsItemIdRouteWithChildren
  '/player/$rootId/$itemId': typeof PlayerRootIdItemIdRouteWithChildren
  '/builder/_layout/': typeof BuilderLayoutIndexRoute
  '/player/$rootId/': typeof PlayerRootIdIndexRoute
  '/analytics/items/$itemId/apps': typeof AnalyticsItemsItemIdAppsRoute
  '/analytics/items/$itemId/export': typeof AnalyticsItemsItemIdExportRoute
  '/analytics/items/$itemId/items': typeof AnalyticsItemsItemIdItemsRoute
  '/analytics/items/$itemId/users': typeof AnalyticsItemsItemIdUsersRoute
  '/builder/items/$itemId/_itemPage': typeof BuilderItemsItemIdItemPageRouteWithChildren
  '/player/$rootId/$itemId/autoLogin': typeof PlayerRootIdItemIdAutoLoginRoute
  '/analytics/items/$itemId/': typeof AnalyticsItemsItemIdIndexRoute
  '/builder/items/$itemId/': typeof BuilderItemsItemIdIndexRoute
  '/player/$rootId/$itemId/': typeof PlayerRootIdItemIdIndexRoute
  '/builder/items/$itemId/_itemPage/publish': typeof BuilderItemsItemIdItemPagePublishRoute
  '/builder/items/$itemId/_itemPage/settings': typeof BuilderItemsItemIdItemPageSettingsRoute
  '/builder/items/$itemId/_itemPage/share': typeof BuilderItemsItemIdItemPageShareRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/analytics'
    | '/auth'
    | '/builder'
    | '/signin'
    | '/about-us'
    | '/contact-us'
    | '/disclaimer'
    | '/features'
    | '/policy'
    | '/support'
    | '/terms'
    | '/home'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/auth/signin'
    | '/auth/success'
    | '/builder/map'
    | '/email/change'
    | '/'
    | '/analytics/'
    | '/player'
    | '/account/settings'
    | '/account/stats'
    | '/account/storage'
    | '/analytics/items/$itemId'
    | '/builder/bookmarks'
    | '/builder/published'
    | '/builder/recycled'
    | '/builder/items/$itemId'
    | '/player/$rootId/$itemId'
    | '/builder/'
    | '/player/$rootId'
    | '/analytics/items/$itemId/apps'
    | '/analytics/items/$itemId/export'
    | '/analytics/items/$itemId/items'
    | '/analytics/items/$itemId/users'
    | '/player/$rootId/$itemId/autoLogin'
    | '/analytics/items/$itemId/'
    | '/builder/items/$itemId/'
    | '/player/$rootId/$itemId/'
    | '/builder/items/$itemId/publish'
    | '/builder/items/$itemId/settings'
    | '/builder/items/$itemId/share'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/auth'
    | '/builder'
    | '/signin'
    | '/about-us'
    | '/contact-us'
    | '/disclaimer'
    | '/features'
    | '/policy'
    | '/support'
    | '/terms'
    | '/home'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/auth/signin'
    | '/auth/success'
    | '/builder/map'
    | '/email/change'
    | '/'
    | '/analytics'
    | '/player'
    | '/account/settings'
    | '/account/stats'
    | '/account/storage'
    | '/builder/bookmarks'
    | '/builder/published'
    | '/builder/recycled'
    | '/player/$rootId'
    | '/analytics/items/$itemId/apps'
    | '/analytics/items/$itemId/export'
    | '/analytics/items/$itemId/items'
    | '/analytics/items/$itemId/users'
    | '/builder/items/$itemId'
    | '/player/$rootId/$itemId/autoLogin'
    | '/analytics/items/$itemId'
    | '/player/$rootId/$itemId'
    | '/builder/items/$itemId/publish'
    | '/builder/items/$itemId/settings'
    | '/builder/items/$itemId/share'
  id:
    | '__root__'
    | '/_landing'
    | '/_memberOnly'
    | '/analytics'
    | '/auth'
    | '/builder'
    | '/signin'
    | '/_landing/about-us'
    | '/_landing/contact-us'
    | '/_landing/disclaimer'
    | '/_landing/features'
    | '/_landing/policy'
    | '/_landing/support'
    | '/_landing/terms'
    | '/_memberOnly/home'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/auth/reset-password'
    | '/auth/signin'
    | '/auth/success'
    | '/builder/_layout'
    | '/builder/map'
    | '/email/change'
    | '/_landing/'
    | '/analytics/'
    | '/player/'
    | '/_memberOnly/account/settings'
    | '/_memberOnly/account/stats'
    | '/_memberOnly/account/storage'
    | '/analytics/items/$itemId'
    | '/builder/_layout/bookmarks'
    | '/builder/_layout/published'
    | '/builder/_layout/recycled'
    | '/builder/items/$itemId'
    | '/player/$rootId/$itemId'
    | '/builder/_layout/'
    | '/player/$rootId/'
    | '/analytics/items/$itemId/apps'
    | '/analytics/items/$itemId/export'
    | '/analytics/items/$itemId/items'
    | '/analytics/items/$itemId/users'
    | '/builder/items/$itemId/_itemPage'
    | '/player/$rootId/$itemId/autoLogin'
    | '/analytics/items/$itemId/'
    | '/builder/items/$itemId/'
    | '/player/$rootId/$itemId/'
    | '/builder/items/$itemId/_itemPage/publish'
    | '/builder/items/$itemId/_itemPage/settings'
    | '/builder/items/$itemId/_itemPage/share'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LandingRoute: typeof LandingRouteWithChildren
  MemberOnlyRoute: typeof MemberOnlyRouteWithChildren
  AnalyticsRoute: typeof AnalyticsRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  BuilderRoute: typeof BuilderRouteWithChildren
  SigninRoute: typeof SigninRoute
  EmailChangeRoute: typeof EmailChangeRoute
  PlayerIndexRoute: typeof PlayerIndexRoute
  PlayerRootIdItemIdRoute: typeof PlayerRootIdItemIdRouteWithChildren
  PlayerRootIdIndexRoute: typeof PlayerRootIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  LandingRoute: LandingRouteWithChildren,
  MemberOnlyRoute: MemberOnlyRouteWithChildren,
  AnalyticsRoute: AnalyticsRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  BuilderRoute: BuilderRouteWithChildren,
  SigninRoute: SigninRoute,
  EmailChangeRoute: EmailChangeRoute,
  PlayerIndexRoute: PlayerIndexRoute,
  PlayerRootIdItemIdRoute: PlayerRootIdItemIdRouteWithChildren,
  PlayerRootIdIndexRoute: PlayerRootIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_landing",
        "/_memberOnly",
        "/analytics",
        "/auth",
        "/builder",
        "/signin",
        "/email/change",
        "/player/",
        "/player/$rootId/$itemId",
        "/player/$rootId/"
      ]
    },
    "/_landing": {
      "filePath": "_landing.tsx",
      "children": [
        "/_landing/about-us",
        "/_landing/contact-us",
        "/_landing/disclaimer",
        "/_landing/features",
        "/_landing/policy",
        "/_landing/support",
        "/_landing/terms",
        "/_landing/"
      ]
    },
    "/_memberOnly": {
      "filePath": "_memberOnly.tsx",
      "children": [
        "/_memberOnly/home",
        "/_memberOnly/account/settings",
        "/_memberOnly/account/stats",
        "/_memberOnly/account/storage"
      ]
    },
    "/analytics": {
      "filePath": "analytics.tsx",
      "children": [
        "/analytics/",
        "/analytics/items/$itemId"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/forgot-password",
        "/auth/login",
        "/auth/register",
        "/auth/reset-password",
        "/auth/signin",
        "/auth/success"
      ]
    },
    "/builder": {
      "filePath": "builder.tsx",
      "children": [
        "/builder/_layout",
        "/builder/map",
        "/builder/items/$itemId"
      ]
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/_landing/about-us": {
      "filePath": "_landing/about-us.tsx",
      "parent": "/_landing"
    },
    "/_landing/contact-us": {
      "filePath": "_landing/contact-us.tsx",
      "parent": "/_landing"
    },
    "/_landing/disclaimer": {
      "filePath": "_landing/disclaimer.tsx",
      "parent": "/_landing"
    },
    "/_landing/features": {
      "filePath": "_landing/features.tsx",
      "parent": "/_landing"
    },
    "/_landing/policy": {
      "filePath": "_landing/policy.tsx",
      "parent": "/_landing"
    },
    "/_landing/support": {
      "filePath": "_landing/support.tsx",
      "parent": "/_landing"
    },
    "/_landing/terms": {
      "filePath": "_landing/terms.tsx",
      "parent": "/_landing"
    },
    "/_memberOnly/home": {
      "filePath": "_memberOnly/home.tsx",
      "parent": "/_memberOnly"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx",
      "parent": "/auth"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx",
      "parent": "/auth"
    },
    "/auth/reset-password": {
      "filePath": "auth/reset-password.tsx",
      "parent": "/auth"
    },
    "/auth/signin": {
      "filePath": "auth/signin.tsx",
      "parent": "/auth"
    },
    "/auth/success": {
      "filePath": "auth/success.tsx",
      "parent": "/auth"
    },
    "/builder/_layout": {
      "filePath": "builder/_layout.tsx",
      "parent": "/builder",
      "children": [
        "/builder/_layout/bookmarks",
        "/builder/_layout/published",
        "/builder/_layout/recycled",
        "/builder/_layout/"
      ]
    },
    "/builder/map": {
      "filePath": "builder.map.tsx",
      "parent": "/builder"
    },
    "/email/change": {
      "filePath": "email.change.tsx"
    },
    "/_landing/": {
      "filePath": "_landing/index.tsx",
      "parent": "/_landing"
    },
    "/analytics/": {
      "filePath": "analytics/index.tsx",
      "parent": "/analytics"
    },
    "/player/": {
      "filePath": "player/index.tsx"
    },
    "/_memberOnly/account/settings": {
      "filePath": "_memberOnly/account/settings.tsx",
      "parent": "/_memberOnly"
    },
    "/_memberOnly/account/stats": {
      "filePath": "_memberOnly/account/stats.tsx",
      "parent": "/_memberOnly"
    },
    "/_memberOnly/account/storage": {
      "filePath": "_memberOnly/account/storage.tsx",
      "parent": "/_memberOnly"
    },
    "/analytics/items/$itemId": {
      "filePath": "analytics/items/$itemId.tsx",
      "parent": "/analytics",
      "children": [
        "/analytics/items/$itemId/apps",
        "/analytics/items/$itemId/export",
        "/analytics/items/$itemId/items",
        "/analytics/items/$itemId/users",
        "/analytics/items/$itemId/"
      ]
    },
    "/builder/_layout/bookmarks": {
      "filePath": "builder/_layout/bookmarks.tsx",
      "parent": "/builder/_layout"
    },
    "/builder/_layout/published": {
      "filePath": "builder/_layout/published.tsx",
      "parent": "/builder/_layout"
    },
    "/builder/_layout/recycled": {
      "filePath": "builder/_layout/recycled.tsx",
      "parent": "/builder/_layout"
    },
    "/builder/items/$itemId": {
      "filePath": "builder/items/$itemId.tsx",
      "parent": "/builder",
      "children": [
        "/builder/items/$itemId/_itemPage",
        "/builder/items/$itemId/"
      ]
    },
    "/player/$rootId/$itemId": {
      "filePath": "player/$rootId/$itemId.tsx",
      "children": [
        "/player/$rootId/$itemId/autoLogin",
        "/player/$rootId/$itemId/"
      ]
    },
    "/builder/_layout/": {
      "filePath": "builder/_layout/index.tsx",
      "parent": "/builder/_layout"
    },
    "/player/$rootId/": {
      "filePath": "player/$rootId/index.tsx"
    },
    "/analytics/items/$itemId/apps": {
      "filePath": "analytics/items/$itemId/apps.tsx",
      "parent": "/analytics/items/$itemId"
    },
    "/analytics/items/$itemId/export": {
      "filePath": "analytics/items/$itemId/export.tsx",
      "parent": "/analytics/items/$itemId"
    },
    "/analytics/items/$itemId/items": {
      "filePath": "analytics/items/$itemId/items.tsx",
      "parent": "/analytics/items/$itemId"
    },
    "/analytics/items/$itemId/users": {
      "filePath": "analytics/items/$itemId/users.tsx",
      "parent": "/analytics/items/$itemId"
    },
    "/builder/items/$itemId/_itemPage": {
      "filePath": "builder/items/$itemId/_itemPage.tsx",
      "parent": "/builder/items/$itemId",
      "children": [
        "/builder/items/$itemId/_itemPage/publish",
        "/builder/items/$itemId/_itemPage/settings",
        "/builder/items/$itemId/_itemPage/share"
      ]
    },
    "/player/$rootId/$itemId/autoLogin": {
      "filePath": "player/$rootId/$itemId/autoLogin.tsx",
      "parent": "/player/$rootId/$itemId"
    },
    "/analytics/items/$itemId/": {
      "filePath": "analytics/items/$itemId/index.tsx",
      "parent": "/analytics/items/$itemId"
    },
    "/builder/items/$itemId/": {
      "filePath": "builder/items/$itemId/index.tsx",
      "parent": "/builder/items/$itemId"
    },
    "/player/$rootId/$itemId/": {
      "filePath": "player/$rootId/$itemId/index.tsx",
      "parent": "/player/$rootId/$itemId"
    },
    "/builder/items/$itemId/_itemPage/publish": {
      "filePath": "builder/items/$itemId/_itemPage/publish.tsx",
      "parent": "/builder/items/$itemId/_itemPage"
    },
    "/builder/items/$itemId/_itemPage/settings": {
      "filePath": "builder/items/$itemId/_itemPage/settings.tsx",
      "parent": "/builder/items/$itemId/_itemPage"
    },
    "/builder/items/$itemId/_itemPage/share": {
      "filePath": "builder/items/$itemId/_itemPage/share.tsx",
      "parent": "/builder/items/$itemId/_itemPage"
    }
  }
}
ROUTE_MANIFEST_END */
